C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/19/2023 17:09:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Teodor\
                    -Desktop\mc_lab_practical\FajkaV.FodorT.JK03\Feladat2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLE
                    -VEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Teodor\Desktop\mc_la
                    -b_practical\FajkaV.FodorT.JK03\Feladat2\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared
                    -/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.ls
                    -t) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_1_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  30   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  31   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  32   1        // [Config Calls]$
  33   1      
  34   1      }
  35          
  36          extern void
  37          WDT_0_enter_DefaultMode_from_RESET (void)
  38          {
  39   1        // $[Watchdog Timer Init Variable Declarations]
  40   1        uint32_t i;
  41   1        bool ea;
  42   1        // [Watchdog Timer Init Variable Declarations]$
  43   1      
  44   1        // $[WDTCN - Watchdog Timer Control]
  45   1        // Deprecated
  46   1        // [WDTCN - Watchdog Timer Control]$
  47   1      
  48   1        // $[WDTCN_2 - Watchdog Timer Control]
  49   1      
  50   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  51   1        WDTCN = 0xA5;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/19/2023 17:09:09 PAGE 2   

  52   1      
  53   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  54   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  55   1          {
  56   2            NOP ();
  57   2          }
  58   1      
  59   1        // Disable WDT
  60   1        ea = IE_EA;
  61   1        IE_EA = 0;
  62   1        WDTCN = 0xDE;
  63   1        WDTCN = 0xAD;
  64   1        IE_EA = ea;
  65   1      
  66   1        // [WDTCN_2 - Watchdog Timer Control]$
  67   1      
  68   1      }
  69          
  70          extern void
  71          PBCFG_0_enter_DefaultMode_from_RESET (void)
  72          {
  73   1        // $[XBR2 - Port I/O Crossbar 2]
  74   1        /***********************************************************************
  75   1         - Weak Pullups enabled 
  76   1         - Crossbar enabled
  77   1         ***********************************************************************/
  78   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  79   1        // [XBR2 - Port I/O Crossbar 2]$
  80   1      
  81   1        // $[PRTDRV - Port Drive Strength]
  82   1        // [PRTDRV - Port Drive Strength]$
  83   1      
  84   1        // $[XBR0 - Port I/O Crossbar 0]
  85   1        // [XBR0 - Port I/O Crossbar 0]$
  86   1      
  87   1        // $[XBR1 - Port I/O Crossbar 1]
  88   1        // [XBR1 - Port I/O Crossbar 1]$
  89   1      
  90   1      }
  91          
  92          extern void
  93          TIMER01_0_enter_DefaultMode_from_RESET (void)
  94          {
  95   1        // $[Timer Initialization]
  96   1        //Save Timer Configuration
  97   1        uint8_t TCON_save;
  98   1        TCON_save = TCON;
  99   1        //Stop Timers
 100   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 101   1      
 102   1        // [Timer Initialization]$
 103   1      
 104   1        // $[TH0 - Timer 0 High Byte]
 105   1        // [TH0 - Timer 0 High Byte]$
 106   1      
 107   1        // $[TL0 - Timer 0 Low Byte]
 108   1        // [TL0 - Timer 0 Low Byte]$
 109   1      
 110   1        // $[TH1 - Timer 1 High Byte]
 111   1        // [TH1 - Timer 1 High Byte]$
 112   1      
 113   1        // $[TL1 - Timer 1 Low Byte]
 114   1        /***********************************************************************
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/19/2023 17:09:09 PAGE 3   

 115   1         - Timer 1 Low Byte = 0x01
 116   1         ***********************************************************************/
 117   1        TL1 = (0x01 << TL1_TL1__SHIFT);
 118   1        // [TL1 - Timer 1 Low Byte]$
 119   1      
 120   1        // $[Timer Restoration]
 121   1        //Restore Timer Configuration
 122   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 123   1      
 124   1        // [Timer Restoration]$
 125   1      
 126   1      }
 127          
 128          extern void
 129          TIMER16_2_enter_DefaultMode_from_RESET (void)
 130          {
 131   1        // $[Timer Initialization]
 132   1        // Save Timer Configuration
 133   1        uint8_t TMR2CN0_TR2_save;
 134   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 135   1        // Stop Timer
 136   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 137   1        // [Timer Initialization]$
 138   1      
 139   1        // $[TMR2CN0 - Timer 2 Control]
 140   1        // [TMR2CN0 - Timer 2 Control]$
 141   1      
 142   1        // $[TMR2H - Timer 2 High Byte]
 143   1        // [TMR2H - Timer 2 High Byte]$
 144   1      
 145   1        // $[TMR2L - Timer 2 Low Byte]
 146   1        // [TMR2L - Timer 2 Low Byte]$
 147   1      
 148   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 149   1        /***********************************************************************
 150   1         - Timer 2 Reload High Byte = 0xF6
 151   1         ***********************************************************************/
 152   1        TMR2RLH = (0xF6 << TMR2RLH_TMR2RLH__SHIFT);
 153   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 154   1      
 155   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 156   1        /***********************************************************************
 157   1         - Timer 2 Reload Low Byte = 0x08
 158   1         ***********************************************************************/
 159   1        TMR2RLL = (0x08 << TMR2RLL_TMR2RLL__SHIFT);
 160   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 161   1      
 162   1        // $[TMR2CN0]
 163   1        /***********************************************************************
 164   1         - Start Timer 2 running
 165   1         ***********************************************************************/
 166   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 167   1        // [TMR2CN0]$
 168   1      
 169   1        // $[Timer Restoration]
 170   1        // Restore Timer Configuration
 171   1        TMR2CN0 |= TMR2CN0_TR2_save;
 172   1        // [Timer Restoration]$
 173   1      
 174   1      }
 175          
 176          extern void
 177          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/19/2023 17:09:09 PAGE 4   

 178          {
 179   1        // $[EIE1 - Extended Interrupt Enable 1]
 180   1        // [EIE1 - Extended Interrupt Enable 1]$
 181   1      
 182   1        // $[EIP1 - Extended Interrupt Priority 1]
 183   1        // [EIP1 - Extended Interrupt Priority 1]$
 184   1      
 185   1        // $[IE - Interrupt Enable]
 186   1        /***********************************************************************
 187   1         - Enable each interrupt according to its individual mask setting
 188   1         - Disable external interrupt 0
 189   1         - Disable external interrupt 1
 190   1         - Disable all SPI0 interrupts
 191   1         - Disable all Timer 0 interrupt
 192   1         - Disable all Timer 1 interrupt
 193   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 194   1         - Disable UART0 interrupt
 195   1         ***********************************************************************/
 196   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 197   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED
 198   1            | IE_ES0__DISABLED;
 199   1        // [IE - Interrupt Enable]$
 200   1      
 201   1        // $[IP - Interrupt Priority]
 202   1        // [IP - Interrupt Priority]$
 203   1      
 204   1      }
 205          
 206          extern void
 207          PORTS_1_enter_DefaultMode_from_RESET (void)
 208          {
 209   1        // $[P1 - Port 1 Pin Latch]
 210   1        // [P1 - Port 1 Pin Latch]$
 211   1      
 212   1        // $[P1MDOUT - Port 1 Output Mode]
 213   1        /***********************************************************************
 214   1         - P1.0 output is open-drain
 215   1         - P1.1 output is open-drain
 216   1         - P1.2 output is open-drain
 217   1         - P1.3 output is open-drain
 218   1         - P1.4 output is push-pull
 219   1         - P1.5 output is open-drain
 220   1         - P1.6 output is open-drain
 221   1         - P1.7 output is open-drain
 222   1         ***********************************************************************/
 223   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 224   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 225   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 226   1            | P1MDOUT_B7__OPEN_DRAIN;
 227   1        // [P1MDOUT - Port 1 Output Mode]$
 228   1      
 229   1        // $[P1MDIN - Port 1 Input Mode]
 230   1        // [P1MDIN - Port 1 Input Mode]$
 231   1      
 232   1        // $[P1SKIP - Port 1 Skip]
 233   1        // [P1SKIP - Port 1 Skip]$
 234   1      
 235   1        // $[P1MASK - Port 1 Mask]
 236   1        // [P1MASK - Port 1 Mask]$
 237   1      
 238   1        // $[P1MAT - Port 1 Match]
 239   1        // [P1MAT - Port 1 Match]$
 240   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/19/2023 17:09:09 PAGE 5   

 241   1      }
 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    141    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
