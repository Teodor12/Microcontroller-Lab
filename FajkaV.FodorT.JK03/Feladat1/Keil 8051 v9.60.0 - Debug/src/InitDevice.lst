C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/22/2023 20:24:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Teodor\
                    -Desktop\mc_lab_practical\FajkaV.FodorT.JK03\Feladat1\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLE
                    -VEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Teodor\Desktop\mc_la
                    -b_practical\FajkaV.FodorT.JK03\Feladat1\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared
                    -/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.ls
                    -t) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_1_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  30   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  31   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  32   1        // [Config Calls]$
  33   1      
  34   1      }
  35          
  36          extern void
  37          PBCFG_0_enter_DefaultMode_from_RESET (void)
  38          {
  39   1        // $[XBR2 - Port I/O Crossbar 2]
  40   1        /***********************************************************************
  41   1         - Weak Pullups enabled 
  42   1         - Crossbar enabled
  43   1         ***********************************************************************/
  44   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  45   1        // [XBR2 - Port I/O Crossbar 2]$
  46   1      
  47   1        // $[PRTDRV - Port Drive Strength]
  48   1        // [PRTDRV - Port Drive Strength]$
  49   1      
  50   1        // $[XBR0 - Port I/O Crossbar 0]
  51   1        // [XBR0 - Port I/O Crossbar 0]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/22/2023 20:24:45 PAGE 2   

  52   1      
  53   1        // $[XBR1 - Port I/O Crossbar 1]
  54   1        // [XBR1 - Port I/O Crossbar 1]$
  55   1      
  56   1      }
  57          
  58          extern void
  59          WDT_0_enter_DefaultMode_from_RESET (void)
  60          {
  61   1        // $[Watchdog Timer Init Variable Declarations]
  62   1        uint32_t i;
  63   1        bool ea;
  64   1        // [Watchdog Timer Init Variable Declarations]$
  65   1      
  66   1        // $[WDTCN - Watchdog Timer Control]
  67   1        // Deprecated
  68   1        // [WDTCN - Watchdog Timer Control]$
  69   1      
  70   1        // $[WDTCN_2 - Watchdog Timer Control]
  71   1      
  72   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  73   1        WDTCN = 0xA5;
  74   1      
  75   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  76   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  77   1          {
  78   2            NOP ();
  79   2          }
  80   1      
  81   1        // Disable WDT
  82   1        ea = IE_EA;
  83   1        IE_EA = 0;
  84   1        WDTCN = 0xDE;
  85   1        WDTCN = 0xAD;
  86   1        IE_EA = ea;
  87   1      
  88   1        // [WDTCN_2 - Watchdog Timer Control]$
  89   1      
  90   1      }
  91          
  92          extern void
  93          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
  94          {
  95   1        // $[CKCON0 - Clock Control 0]
  96   1        /***********************************************************************
  97   1         - System clock divided by 4
  98   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
  99   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 100   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 101   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 102   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 103   1         - Timer 1 uses the clock defined by the prescale field, SCA
 104   1         ***********************************************************************/
 105   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 106   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 107   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 108   1            | CKCON0_T1M__PRESCALE;
 109   1        // [CKCON0 - Clock Control 0]$
 110   1      
 111   1        // $[TMOD - Timer 0/1 Mode]
 112   1        /***********************************************************************
 113   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 114   1         - Mode 0, 13-bit Counter/Timer
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/22/2023 20:24:45 PAGE 3   

 115   1         - Timer Mode
 116   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 117   1         - Timer Mode
 118   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 119   1         ***********************************************************************/
 120   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 121   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 122   1        // [TMOD - Timer 0/1 Mode]$
 123   1      
 124   1        // $[TCON - Timer 0/1 Control]
 125   1        /***********************************************************************
 126   1         - Start Timer 0 running
 127   1         ***********************************************************************/
 128   1        TCON |= TCON_TR0__RUN;
 129   1        // [TCON - Timer 0/1 Control]$
 130   1      
 131   1      }
 132          
 133          extern void
 134          TIMER01_0_enter_DefaultMode_from_RESET (void)
 135          {
 136   1        // $[Timer Initialization]
 137   1        //Save Timer Configuration
 138   1        uint8_t TCON_save;
 139   1        TCON_save = TCON;
 140   1        //Stop Timers
 141   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 142   1      
 143   1        // [Timer Initialization]$
 144   1      
 145   1        // $[TH0 - Timer 0 High Byte]
 146   1        // [TH0 - Timer 0 High Byte]$
 147   1      
 148   1        // $[TL0 - Timer 0 Low Byte]
 149   1        // [TL0 - Timer 0 Low Byte]$
 150   1      
 151   1        // $[TH1 - Timer 1 High Byte]
 152   1        // [TH1 - Timer 1 High Byte]$
 153   1      
 154   1        // $[TL1 - Timer 1 Low Byte]
 155   1        // [TL1 - Timer 1 Low Byte]$
 156   1      
 157   1        // $[Timer Restoration]
 158   1        //Restore Timer Configuration
 159   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 160   1      
 161   1        // [Timer Restoration]$
 162   1      
 163   1      }
 164          
 165          extern void
 166          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 167          {
 168   1        // $[EIE1 - Extended Interrupt Enable 1]
 169   1        // [EIE1 - Extended Interrupt Enable 1]$
 170   1      
 171   1        // $[EIP1 - Extended Interrupt Priority 1]
 172   1        // [EIP1 - Extended Interrupt Priority 1]$
 173   1      
 174   1        // $[IE - Interrupt Enable]
 175   1        /***********************************************************************
 176   1         - Enable each interrupt according to its individual mask setting
 177   1         - Disable external interrupt 0
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/22/2023 20:24:45 PAGE 4   

 178   1         - Disable external interrupt 1
 179   1         - Disable all SPI0 interrupts
 180   1         - Enable interrupt requests generated by the TF0 flag
 181   1         - Disable all Timer 1 interrupt
 182   1         - Disable Timer 2 interrupt
 183   1         - Disable UART0 interrupt
 184   1         ***********************************************************************/
 185   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 186   1            | IE_ET0__ENABLED | IE_ET1__DISABLED | IE_ET2__DISABLED
 187   1            | IE_ES0__DISABLED;
 188   1        // [IE - Interrupt Enable]$
 189   1      
 190   1        // $[IP - Interrupt Priority]
 191   1        // [IP - Interrupt Priority]$
 192   1      
 193   1      }
 194          
 195          extern void
 196          PORTS_1_enter_DefaultMode_from_RESET (void)
 197          {
 198   1        // $[P1 - Port 1 Pin Latch]
 199   1        // [P1 - Port 1 Pin Latch]$
 200   1      
 201   1        // $[P1MDOUT - Port 1 Output Mode]
 202   1        /***********************************************************************
 203   1         - P1.0 output is open-drain
 204   1         - P1.1 output is open-drain
 205   1         - P1.2 output is open-drain
 206   1         - P1.3 output is open-drain
 207   1         - P1.4 output is push-pull
 208   1         - P1.5 output is open-drain
 209   1         - P1.6 output is open-drain
 210   1         - P1.7 output is open-drain
 211   1         ***********************************************************************/
 212   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 213   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 214   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 215   1            | P1MDOUT_B7__OPEN_DRAIN;
 216   1        // [P1MDOUT - Port 1 Output Mode]$
 217   1      
 218   1        // $[P1MDIN - Port 1 Input Mode]
 219   1        // [P1MDIN - Port 1 Input Mode]$
 220   1      
 221   1        // $[P1SKIP - Port 1 Skip]
 222   1        // [P1SKIP - Port 1 Skip]$
 223   1      
 224   1        // $[P1MASK - Port 1 Mask]
 225   1        // [P1MASK - Port 1 Mask]$
 226   1      
 227   1        // $[P1MAT - Port 1 Match]
 228   1        // [P1MAT - Port 1 Match]$
 229   1      
 230   1      }
 231          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    129    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/22/2023 20:24:45 PAGE 5   

   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
